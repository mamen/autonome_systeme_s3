# http://wiki.ros.org/move_base?distro=kinetic#Parameters

# ~base_global_planner (string, default: "navfn/NavfnROS" For 1.1+ series)
# The name of the plugin for the global planner to use with move_base, see pluginlib documentation for more details on plugins. This plugin must adhere to the nav_core::BaseGlobalPlanner interface specified in the nav_core package. (1.0 series default: "NavfnROS")
base_global_planner: global_planner/GlobalPlanner

# ~base_local_planner (string, default: "base_local_planner/TrajectoryPlannerROS" For 1.1+ series)
# The name of the plugin for the local planner to use with move_base see pluginlib documentation for more details on plugins. This plugin must adhere to the nav_core::BaseLocalPlanner interface specified in the nav_core package. (1.0 series default: "TrajectoryPlannerROS")
base_local_planner: dwa_local_planner/DWAPlannerROS

# ~recovery_behaviors (list, default: [{name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery}, {name: rotate_recovery, type: rotate_recovery/RotateRecovery}, {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}] For 1.1+ series)
# A list of recovery behavior plugins to use with move_base, see pluginlib documentation for more details on plugins. These behaviors will be run when move_base fails to find a valid plan in the order that they are specified. After each behavior completes, move_base will attempt to make a plan. If planning is successful, move_base will continue normal operation. Otherwise, the next recovery behavior in the list will be executed. These plugins must adhere to the nav_core::RecoveryBehavior interface specified in the nav_core package. (1.0 series default: [{name: conservative_reset, type: ClearCostmapRecovery}, {name: rotate_recovery, type: RotateRecovery}, {name: aggressive_reset, type: ClearCostmapRecovery}]). Note: For the default parameters, the aggressive_reset behavior will clear out to a distance of 4 * ~/local_costmap/circumscribed_radius.

# ~controller_frequency (double, default: 20.0)
# The rate in Hz at which to run the control loop and send velocity commands to the base.
controller_frequency: 3.0

# ~planner_patience (double, default: 5.0)
# How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed.
planner_patience: 5

# ~controller_patience (double, default: 15.0)
# How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.
controller_patience: 10

# ~conservative_reset_dist (double, default: 3.0)
# The distance away from the robot in meters beyond which obstacles will be cleared from the costmap when attempting to clear space in the map. Note, this parameter is only used when the default recovery behaviors are used for move_base.
conservative_reset_dist: 0.1

# ~recovery_behavior_enabled (bool, default: true)
# Whether or not to enable the move_base recovery behaviors to attempt to clear out space.
recovery_behavior_enabled: true

# ~clearing_rotation_allowed (bool, default: true)
# Determines whether or not the robot will attempt an in-place rotation when attempting to clear out space. Note: This parameter is only used when the default recovery behaviors are in use, meaning the user has not set the recovery_behaviors parameter to anything custom.
clearing_rotation_allowed: true

# ~shutdown_costmaps (bool, default: false)
# Determines whether or not to shutdown the costmaps of the node when move_base is in an inactive state
shutdown_costmaps: false

# ~oscillation_timeout (double, default: 0.0)
# How long in seconds to allow for oscillation before executing recovery behaviors. A value of 0.0 corresponds to an infinite timeout. New in navigation 1.3.1
oscillation_timeout: 2

# ~oscillation_distance (double, default: 0.5)
# How far in meters the robot must move to be considered not to be oscillating. Moving this far resets the timer counting up to the ~oscillation_timeout New in navigation 1.3.1
oscillation_distance: 0.1

# ~planner_frequency (double, default: 0.0)
# The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0, the global planner will only run when a new goal is received or the local planner reports that its path is blocked. New in navigation 1.6.0
planner_frequency: 2.5

# ~max_planning_retries (int32_t, default: -1)
# How many times to allow for planning retries before executing recovery behaviors. A value of -1.0 corresponds to an infinite retries.
max_planning_retries: 8
